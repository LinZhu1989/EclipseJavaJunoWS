package gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

import linkedInSelenium.LinkedInTool;
import myComp.MyButton;
import myComp.MyLabel;
import myComp.WriteToFile;

class HelperUI extends JFrame implements ActionListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private GridBagLayout gb;
	private GridBagConstraints gbc;
	private JPanel jp;

	private MyLabel lblTitle, lblInfo, lblInfo2, lbl1, lbl2, lbl3, lbl4,
			lbl1info, lbl2info, lbl3info, lbl4info, lbl5info, lblbtninfo;
	private MyButton btnAbout, btnInfo, btnGuide, btnAddCon, btnEndorse,
			btnServer, btnBrowser, btnOK, btnReset, btnGo;
	private JTextField txtName, txtNum;
	private JPasswordField txtPIN;
	private UserSelection userChoice;
	private BrowserType browser;
	private String browserLocation;
	private boolean ifServerRun;
	private boolean ifCanRun;

	private java.awt.Font fontTitle, fontLabelM, fontLabelS, fontLabelXS,
			fontButtonM, fontButtonS, fontButtonL;
	private Color colorDefault, colorTitle, colorLabel, colorLabel2,
			colorWarning, colorOK, colorDisable, colorTxt;
	private Dimension sizeDefault, sizeTxt, sizeWider, sizeXWider, sizeSmall;

	private WriteToFile systemLogWriter, userLogWriter;

	public HelperUI() {

		this.setTitle("Lin Zhu LinkedIn Automatic Helper");
		jp = (JPanel) this.getContentPane();
		gb = new GridBagLayout();

		gbc = new GridBagConstraints();
		jp.setBackground(new Color(24, 116, 205));
		jp.setLayout(gb);
		// jp.setLayout(new GridLayout(7, 3, 15, 15));
		iniComp();
		setComp();
		addAllComp(jp);
	}

	private void addAllComp(JPanel jp) {

		gbc.insets = new Insets(10, 10, 10, 10);

		gbc.fill = GridBagConstraints.BOTH;
		gbc.gridwidth = 0;
		gbc.weighty = 0;
		addComp(lblTitle);

		gbc.gridwidth = 2;
		addComp(lblInfo);
		gbc.gridwidth = 1;
		addComp(btnAbout);
		addComp(btnInfo);

		gbc.gridwidth = GridBagConstraints.REMAINDER;
		addComp(btnGuide);
		// addComp(lblInfo);

		gbc.gridwidth = 1;
		addComp(lbl1);
		gbc.fill = GridBagConstraints.HORIZONTAL;
		addComp(txtName);
		gbc.fill = GridBagConstraints.BOTH;
		gbc.gridwidth = GridBagConstraints.REMAINDER;
		addComp(lbl1info);

		gbc.gridwidth = 1;
		addComp(lbl2);
		gbc.fill = GridBagConstraints.HORIZONTAL;
		addComp(txtPIN);
		gbc.fill = GridBagConstraints.BOTH;
		gbc.gridwidth = GridBagConstraints.REMAINDER;
		addComp(lbl2info);

		gbc.gridwidth = 1;
		addComp(btnAddCon);
		addComp(btnEndorse);
		gbc.gridwidth = GridBagConstraints.REMAINDER;
		addComp(lblbtninfo);

		gbc.gridwidth = 1;
		addComp(lbl3);
		gbc.fill = GridBagConstraints.HORIZONTAL;
		addComp(txtNum);
		gbc.fill = GridBagConstraints.BOTH;
		gbc.gridwidth = GridBagConstraints.REMAINDER;
		addComp(lbl3info);

		gbc.gridwidth = 1;
		addComp(btnServer);
		gbc.gridwidth = GridBagConstraints.REMAINDER;
		addComp(lbl4info);

		gbc.gridwidth = 1;
		addComp(btnBrowser);

		gbc.gridwidth = GridBagConstraints.REMAINDER;
		addComp(lbl5info);
		// addComp(lbl5info2);

		gbc.gridwidth = 1;
		addComp(btnOK);
		addComp(btnReset);
		gbc.gridwidth = GridBagConstraints.REMAINDER;
		addComp(btnGo);

		btnAbout.addActionListener(this);
		btnInfo.addActionListener(this);
		btnGuide.addActionListener(this);
		btnAddCon.addActionListener(this);
		btnEndorse.addActionListener(this);
		btnServer.addActionListener(this);
		btnBrowser.addActionListener(this);
		btnOK.addActionListener(this);
		btnReset.addActionListener(this);
		btnGo.addActionListener(this);
	}

	private void setComp() {

		colorDefault = Color.BLACK;
		colorTitle = new Color(255, 127, 36);
		colorLabel = new Color(84, 84, 84);
		colorLabel2 = new Color(99, 184, 255);
		colorOK = Color.GREEN;
		colorWarning = Color.RED;
		colorDisable = Color.GRAY;
		colorTxt = new Color(159, 182, 205);
		fontTitle = new java.awt.Font("Dialog", 1, 45);
		fontLabelM = new java.awt.Font("Dialog", 1, 26);
		fontLabelS = new java.awt.Font("Dialog", 1, 17);
		fontLabelXS = new java.awt.Font("Dialog", 1, 14);
		fontButtonM = new java.awt.Font("Dialog", 1, 22);
		fontButtonL = new java.awt.Font("Dialog", 1, 31);
		fontButtonS = new java.awt.Font("Dialog", 1, 18);

		sizeDefault = new Dimension(300, 50);
		sizeTxt = new Dimension(300, 25);
		sizeWider = new Dimension(400, 50);
		sizeXWider = new Dimension(680, 50);
		sizeSmall = new Dimension(120, 25);

		btnAbout.customSetting(fontButtonS, sizeSmall, null);
		btnInfo.customSetting(fontButtonS, sizeSmall, null);
		btnGuide.customSetting(fontButtonS, sizeSmall, null);
		btnAddCon.customSetting(fontButtonM, sizeDefault, null);
		btnEndorse.customSetting(fontButtonM, sizeDefault, null);
		btnServer.customSetting(fontButtonM, sizeDefault, null);
		btnBrowser.customSetting(fontButtonM, sizeDefault, null);
		btnOK.customSetting(fontButtonL, sizeDefault, null);
		btnReset.customSetting(fontButtonL, sizeDefault, null);
		btnGo.customSetting(fontButtonL, sizeDefault, null);
		btnOK.setForeground(colorWarning);
		btnGo.setForeground(colorDisable);

		lblTitle.customSetting(fontTitle, sizeDefault, colorTitle);
		lbl1.customSetting(fontLabelM, sizeDefault, colorLabel);
		lbl2.customSetting(fontLabelM, sizeDefault, colorLabel);
		lbl3.customSetting(fontLabelM, sizeDefault, colorLabel);
		lbl1info.customSetting(fontLabelS, sizeWider, colorLabel2);
		lbl2info.customSetting(fontLabelS, sizeWider, colorLabel2);
		lblbtninfo.customSetting(fontLabelS, sizeWider, colorLabel2);
		lbl3info.customSetting(fontLabelS, sizeWider, colorLabel2);
		lbl4info.customSetting(fontLabelXS, sizeXWider, colorLabel2);
		lbl5info.customSetting(fontLabelXS, sizeXWider, colorLabel2);

		txtName.setPreferredSize(sizeTxt);
		txtNum.setPreferredSize(sizeTxt);
		txtPIN.setPreferredSize(sizeTxt);

		txtName.setBackground(colorTxt);
		txtNum.setBackground(colorTxt);
		txtPIN.setBackground(colorTxt);

		txtName.setHorizontalAlignment(JTextField.CENTER);
		txtNum.setHorizontalAlignment(JTextField.CENTER);
		txtPIN.setHorizontalAlignment(JTextField.CENTER);

	}

	private void iniComp() {

		systemLogWriter = new WriteToFile(true);
		userLogWriter = new WriteToFile(false);

		lblTitle = new MyLabel("LinkedIn Automatic Helper",
				SwingConstants.CENTER);
		lblInfo = new MyLabel("", SwingConstants.RIGHT);
		btnAbout = new MyButton("About", 1);
		btnInfo = new MyButton("Help", 1);
		btnGuide = new MyButton("Guide", 1);
		lbl1 = new MyLabel("Account Username", SwingConstants.CENTER);
		lbl2 = new MyLabel("Account Password", SwingConstants.CENTER);
		lbl3 = new MyLabel("Number of Action", SwingConstants.CENTER);

		btnAddCon = new MyButton("Add Connection", 2);
		btnEndorse = new MyButton("Endorse Connections", 2);

		lbl1info = new MyLabel(
				"<HTML>Please type the email address you registerd for LinkedIn.</html>");
		lbl2info = new MyLabel(
				"<HTML>Please type the password of your LinkedIn account.</html>");
		lblbtninfo = new MyLabel(
				"<HTML>Please select what you want to do, add connections or endorsing.</html>");
		lbl3info = new MyLabel(
				"<HTML>Please type the totol number of actions you want, either for adding connections or endorsing.</html>");
		lbl4info = new MyLabel(
				"<HTML>Please run the selenium server by locating the path of file selenium-server-standalone-2.43.1.jar. Make sure all the files (including the selenium****.jar and linkedInHelper.jar)are in the same level.</html>");
		lbl5info = new MyLabel(
				"<HTML>Please find your Browser.exe file to lacate the path of your browser.(eg. firefox.exe) Now only firefox browser is supported. Chrome support is coming soon!</html>");

		txtName = new JTextField(15);
		txtPIN = new JPasswordField();
		txtNum = new JTextField(15);
		userChoice = UserSelection.DEFAULT;
		browser = BrowserType.DEFAULT;

		btnServer = new MyButton("Run Server", 2);
		btnBrowser = new MyButton("Select Browser", 2);
		btnOK = new MyButton("OK", 0);
		btnReset = new MyButton("Reset", 0);
		btnGo = new MyButton("Run App", 0);

		ifCanRun = false;
		ifServerRun = false;
	}

	public void addComp(Component button) {
		gb.setConstraints(button, gbc);
		jp.add(button);
	}

	public void actionPerformed(ActionEvent ae) {

		if (ae.getSource() == btnAbout) {
			try {
				
				MessageUI aboutMsg = new MessageUI(MessageType.ABOUT);
				this.add(aboutMsg);
			} catch (Exception e) {
			}

		}

		if (ae.getSource() == btnInfo) {
			try {
				MessageUI aboutMsg = new MessageUI(MessageType.HELP);
			} catch (Exception e) {
			}

		}

		if (ae.getSource() == btnGuide) {
			try {
				
				MessageUI frame = new MessageUI(MessageType.GUIDE);
				
				//MessageUI aboutMsg = new MessageUI(MessageType.GUIDE);
			} catch (Exception e) {
			}

		}

		if (ae.getSource() == btnOK) {
			systemLogWriter.write("User Click OK");
			if (checkValues()) {
				JOptionPane
						.showMessageDialog(
								null,
								"<HTML>Please check all the information you typed,please click 'Run App' to if there is no error.</HTML>");
				ifCanRun = true;
				btnOK.setForeground(Color.WHITE);
				btnGo.setForeground(Color.RED);
				systemLogWriter.write("[OK] All information are provided.");
			} else {
				showErrors();
				JOptionPane.showMessageDialog(null,
						"Please check your input, error details are shown.");
				systemLogWriter
						.write("[ERROR] More information are need to provide. Or there is any mistake.");
			}
		}

		if (ae.getSource() == btnAddCon) {
			systemLogWriter.write("User Click ADD CONNECTION");
			userChoice = UserSelection.ADDCONNECTION;
		}

		if (ae.getSource() == btnEndorse) {
			systemLogWriter.write("User Click ENDORSING");
			userChoice = UserSelection.ENDORSING;
		}

		if (ae.getSource() == btnServer) {
			systemLogWriter.write("User Click run Server");
			JFileChooser choose = new JFileChooser();
			int result = choose.showOpenDialog(this);
			if (result == 0) {
				try {
					File file = choose.getSelectedFile();
					RunServerBat server = new RunServerBat(file.getPath());
					server.runServer();
					systemLogWriter.write("[OK] Server starts to run.");
					ifServerRun = true;
				} catch (Exception ee) {
					systemLogWriter.write("[ERROR] Fail to start the server.");
					ee.printStackTrace();
				}
			}

		}

		if (ae.getSource() == btnBrowser) {
			systemLogWriter.write("User click select browser.");
			JFileChooser choose = new JFileChooser();
			int result = choose.showOpenDialog(this);
			if (result == 0) {
				try {
					File file = choose.getSelectedFile();
					String[] s = file.getPath().split("\\\\");
					browserLocation = "";
					for (int i = 0; i < s.length; i++) {
						browserLocation += s[i];
						if (i < s.length - 1) {
							browserLocation += "/";
						}
					}
					systemLogWriter.write(s[s.length - 1]);
					if (s[s.length - 1].toUpperCase().startsWith(
							BrowserType.FIREFOX.toString().toUpperCase())) {
						systemLogWriter.write("User select FIREFOX.");
						browser = BrowserType.FIREFOX;
					} else {

					}
					lbl5info.setText("<HTML>The path of your browser you selected is:"
							+ browserLocation
							+ "<br>You use browser:"
							+ browser.toString() + "</html>");

				} catch (Exception ee) {
					ee.printStackTrace();
				}
			}

		}

		if (ae.getSource() == btnReset) {
			systemLogWriter
					.write("User click Reset, all the information are reset to default.");
			txtName.setText("");
			txtPIN.setText("");
			txtNum.setText("");
			userChoice = UserSelection.DEFAULT;
			lbl1info.toDefaultColor();
			lbl2info.toDefaultColor();
			lblbtninfo.toDefaultColor();
			lbl3info.toDefaultColor();
			lbl4info.toDefaultColor();
			lbl5info.toDefaultColor();
			lbl1info.setText("<HTML>Please type the email address you registerd for LinkedIn.</html>");
			lbl2info.setText("<HTML>Please type the password of your LinkedIn account.</html>");
			lblbtninfo
					.setText("<HTML>Please select what you want to do, add connections or endorsing.</html>");
			lbl3info.setText("<HTML>Please type the totol number of actions you want, either for adding connections or endorsing.</html>");
			lbl4info.setText("<HTML>Please run the selenium server by locating the path of file selenium-server-standalone-2.43.1.jar. Make sure all the files (including the selenium****.jar and linkedInHelper.jar)are in the same level.</html>");
			lbl5info.setText("<HTML>Please find your Browser.exe file to lacate the path of your browser.(eg. firefox.exe) Now only firefox and chrome browser are supported.</html>");
			ifCanRun = false;
			btnOK.setForeground(Color.RED);
			btnGo.setForeground(Color.WHITE);

			JOptionPane.showMessageDialog(null,
					"Please type all the information required.");
		}

		if (ae.getSource() == btnGo) {
			systemLogWriter.write("User Click Run App");
			if (ifCanRun) {
				JOptionPane
						.showMessageDialog(
								null,
								"<html>Now the app starts, failure can be caused by any reason including wrong account name, password or any browser problem. <br> Please contact the app developer Lin Zhu by email(tracyjuly0706@gmail.com) if there is any unhandled bugs, thank you.</html>");
				runApp();
			} else {
				JOptionPane
						.showMessageDialog(
								null,
								"You are not allowed to run app now, please complete all the information all click 'OK' to confirm first.");
			}
		}

	}

	private void runApp() {
		systemLogWriter.write("Start to run the LinkedIn Helper.");
		LinkedInTool linkedin = new LinkedInTool(txtName.getText(), new String(
				txtPIN.getPassword()), "https://www.linkedin.com", browser
				.toString().toLowerCase(), browserLocation, 4444,
				Integer.parseInt(txtNum.getText()), userChoice, userLogWriter);

		try {
			linkedin.runTool();
		} catch (Exception e) {
			JOptionPane
					.showMessageDialog(null,
							"Please check if you have started your Selenium Server on localhost:4444.");
		}

	}

	private void showErrors() {

		// System.out.print("Error!");
	}

	private boolean checkValues() {

		boolean result = true;
		String emailReg = "[\\w]+@[\\w]+.[\\w]+";

		// Check account name field
		if (txtName.getText() == null) {
			lbl1info.setText("Sorry, you did not type your account name!");
			showWarningColor(lbl1info, true);
			result = false;
		} else if (!txtName.getText().matches(emailReg)) {
			lbl1info.setText("Please check your email address!");
			showWarningColor(lbl1info, true);
			result = false;
		} else {
			showWarningColor(lbl1info, false);
			lbl1info.setText("<HTML>[OK!] The email address you typed is "
					+ txtName.getText() + "</HTML>");

		}

		// Check user password field
		if (txtPIN == null) {
			lbl2info.setText("Sorry, you did not type your password!");
			showWarningColor(lbl2info, true);
			result = false;
		} else if (txtPIN.getPassword().length == 0) {
			showWarningColor(lbl2info, true);
			lbl2info.setText("Sorry, you did not type your password!");
			result = false;
		} else {
			showWarningColor(lbl2info, false);
			lbl2info.setText("<HTML>[OK!] The password you typed contains "
					+ txtPIN.getPassword().length + " digits, starting with '"
					+ txtPIN.getPassword()[0] + "'.<HTML>");
		}

		// Check the total number user typed

		if (txtNum.getText() == null) {
			lbl3info.setText("Please type the total number!");
			showWarningColor(lbl3info, true);
			result = false;
		} else {

			try {
				int number = Integer.parseInt(txtNum.getText());
				if (number < 0) {
					lbl3info.setText("Please type a positive total number!");
					showWarningColor(lbl3info, true);
					result = false;
				} else {
					lbl3info.setText("<HTML>[OK!] The total number you enter is "
							+ number + "</HTML>");
					showWarningColor(lbl3info, false);
				}
			} catch (NumberFormatException e) {
				lbl3info.setText("Please type an integer.");
				showWarningColor(lbl3info, true);
				result = false;
			}
		}

		// Check user selection
		if (userChoice == UserSelection.DEFAULT) {
			lblbtninfo.setText("Sorry, you did not choose what you want!");
			showWarningColor(lblbtninfo, true);
			result = false;
		} else {
			lblbtninfo.setText("<HTML>[OK!] You have selected " + userChoice
					+ ".</HTML>");
			showWarningColor(lblbtninfo, false);
		}

		// Check browser information
		if (browserLocation == null) {
			lbl5info.setText("Sorry, you did not locate the browser file.");
			showWarningColor(lbl5info, true);
			result = false;
		} else if (browserLocation.length() < 1) {
			lbl5info.setText("Sorry, you did not locate the browser file.");
			showWarningColor(lbl5info, true);
			result = false;
		} else if (!browser.equals(BrowserType.FIREFOX)) {
			lbl5info.setText("Only Firefox Browser is supported, sorry.");
			showWarningColor(lbl5info, false);
		}
		{
			lbl5info.setText("<HTML>[OK!] The path of browser is"
					+ browserLocation + ".</HTML>");
			showWarningColor(lbl5info, false);
		}

		// Check server status
		if (!ifServerRun) {
			lbl4info.setText("Sorry, you have not run the selenium server!");
			showWarningColor(lbl4info, true);
			result = false;
		} else {
			lbl4info.setText("<HTML>[OK!] The server has been run! Please run it again if you close the server manually. Because shut-down operation will not be detected.</HTML>");
			showWarningColor(lbl4info, false);
		}

		return result;
	}

	private void showWarningColor(Component c, boolean b) {

		if (b) {
			c.setForeground(Color.RED);
		} else {
			c.setForeground(Color.GREEN);
		}

	}

	public static void main(String arg[]) {
		JFrame.setDefaultLookAndFeelDecorated(true);
		HelperUI frm = new HelperUI();

		frm.pack();
		// frm.setSize(1200, 600);
		frm.setVisible(true);
		frm.setResizable(false);
		frm.setLocationRelativeTo(null);
		frm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
}