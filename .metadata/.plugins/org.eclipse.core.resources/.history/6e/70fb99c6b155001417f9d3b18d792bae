package myJobDB;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

import main.CommonData;

public class JobDatabaseManager {

	private Connection conn;
	private String insql;
	private String upsql;
	private String delsql;
	private String sql = "select * from user";
	private String name;

	private ResultSet rs = null;

	public JobDatabaseManager() {

	}

	public Connection ConnectMysql() {
		try {
			Class.forName(CommonData.connect_drivename);
			conn = DriverManager.getConnection(CommonData.connect_url,
					CommonData.connect_name, CommonData.connect_password);
			if (!conn.isClosed()) {
				System.out.println("Succeeded connecting to the Database!");
			} else {
				System.out.println("Falled connecting to the Database!");
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return conn;
	}

	public void CutConnection(Connection conn) throws SQLException {
		try {
			if (rs != null)
				;
			if (conn != null)
				;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			rs.close();
			conn.close();
		}
	}

	class JobData {// 内部类，其字段对应用来存放、提取数据库中的数据

		private int id;
		private String data = "";
		private String title = "";
		private String company = "";
		private String website = "";
		private String description = "";
		private String attachment = "";
		private String status = "";

		// 通过set方法，往类的实例里“存放”数据
		// 通过get方法，从类的实例里“获得”数据，然后再通过插入数据库
		public void setId(int jobid) {
			this.id = jobid;
		}

		public void setData(String jobdata) {
			this.data = jobdata;
		}
		
		public void setTitle(String jobtitle) {
			this.title = jobtitle;
		}
		
		public void setCompany(String jobcompany) {
			this.company = jobcompany;
		}
		
		public void setWebsite(String jobwebsite) {
			this.website = jobwebsite;
		}
		
		public void setDescription(String jobdescription) {
			this.description = jobdescription;
		}
		
		public void setAttachment(String jobattachment) {
			this.attachment = jobattachment;
		}
		
		public void setStatus(String jobstatus) {
			this.status = jobstatus;
		}

		public Integer getId() {
			return id;
		}

		public String getData() {
			return data;
		}
		
		public String getTitle() {
			return title;
		}
		
		public String getCompany() {
			return company;
		}
		
		public String getWebsite() {
			return website;
		}
		
		public String getDescription() {
			return description;
		}
		
		public String getAttachment() {
			return attachment;
		}
		
		public String getStatus() {
			return status;
		}

		
	}

	// 插入、删除、更新的方法是一样的，不一样的是数据库参数
	public boolean InsertSql(user user) {
		try {

			insql = "insert into user(userid,username,password,email) values(?,?,?,?)";
			// 上面的方法比下面的方法有优势，一方面是安全性，另一方面我忘记了……
			// insql="insert into user(userid,username,password,email) values(user.getId,user.getName,user.getPassword,user.getEmail)";
			PreparedStatement ps = conn.prepareStatement(insql);
			// .preparedStatement(insql);
			// PreparedStatement ps=(PreparedStatement)
			// conn.prepareStatement(insql);
			ps.setInt(1, user.getId());
			ps.setString(2, user.getName());
			ps.setString(3, user.getPassword());
			ps.setString(4, user.getEmail());
			int result = ps.executeUpdate();
			// ps.executeUpdate();无法判断是否已经插入
			if (result > 0)
				return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	// 与其他操作相比较，查询语句在查询后需要一个查询结果集（ResultSet）来保存查询结果
	public void SelectSql(String sql) {
		try {
			Statement statement = conn.createStatement();
			rs = statement.executeQuery(sql);
			while (rs.next()) {
				name = rs.getString("username");
				System.out.println(rs.getString("userid") + name
						+ rs.getString("email"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public boolean UpdateSql(String upsql) {
		try {
			PreparedStatement ps = conn.prepareStatement(upsql);
			int result = ps.executeUpdate();// 返回行数或者0
			if (result > 0)
				return true;
		} catch (SQLException ex) {
			Logger.getLogger(JobDatabaseManager.class.getName()).log(
					Level.SEVERE, null, ex);
		}
		return false;
	}

	public boolean DeletSql(String delsql) {

		try {
			PreparedStatement ps = conn.prepareStatement(upsql);
			int result = ps.executeUpdate(delsql);
			if (result > 0)
				return true;
		} catch (SQLException ex) {
			Logger.getLogger(JobDatabaseManager.class.getName()).log(
					Level.SEVERE, null, ex);
		}
		return false;
	}

}
